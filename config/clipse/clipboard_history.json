{"clipboardHistory":[{"value":"https://github.com/pbatard/rufus/releases/download/v4.5/rufus-4.5p.exe","recorded":"2024-07-23 22:52:09.539583922","filePath":"null","pinned":false},{"value":"for(int i=0;i\u003cfreq.size()-1;i++){\n        if(freq[i] \u003e= 1 \u0026\u0026 freq[i+1] \u003e= 1)\n        {\n            z++;\n            count++;\n            freq[i]--;\n            freq[i+1]--;\n        }\n    }","recorded":"2024-07-23 22:31:00.176124508","filePath":"null","pinned":false},{"value":"for(int i=0;i\u003cfreq.size()-1;i++){\n        if(freq[i] \u003e= 1 \u0026\u0026 freq[i+1] \u003e= 1)\n        {\n            count++;\n            freq[i]--;\n            freq[i+1]--;\n        }\n    }","recorded":"2024-07-23 22:26:27.574189941","filePath":"null","pinned":false},{"value":"\n  vector\u003cvector\u003cint\u003e\u003e arr = {{-9, -9, -9, 1, 1, 1}, {0, -9, 0, 4, 3, 2},\n                             {-9, -9, -9, 1, 2, 3}, {0, 0, 8, 6, 6, 0},\n                             {0, 0, 0, -2, 0, 0},   {0, 0, 1, 2, 4, 0}};\n\n  int a = 0, b = 3, c = 0, d = 3;\n\n  int max_sum = INT_MIN;\n  while (a \u003c 4 \u0026\u0026 b \u003c 7) {\n    while (c \u003c 4 \u0026\u0026 d \u003c 7) {\n      int sum = 0, i, j;\n      for (i = a; i \u003c b; i++) {\n        for (j = c; j \u003c d; j++) {\n          sum += arr[i][j];\n          /*cout \u003c\u003c \"(\" \u003c\u003c i \u003c\u003c \",\" \u003c\u003c j \u003c\u003c \" )\";*/\n        }\n      }\n      sum -= arr[i - 2][j - 3];\n      sum -= arr[i - 2][j - 1];\n      max_sum = max(max_sum, sum);\n      c++;\n      d++;\n    }\n    a++;\n    b++;\n    c = 0;\n    d = 3;\n  }\n  cout \u003c\u003c max_sum \u003c\u003c endl;\n","recorded":"2024-07-23 21:40:32.985537071","filePath":"null","pinned":false},{"value":"      cout \u003c\u003c sum \u003c\u003c endl;\n","recorded":"2024-07-23 21:32:17.887251199","filePath":"null","pinned":false},{"value":"      cout \u003c\u003c i - 1 \u003c\u003c \" \" \u003c\u003c j - 2 \u003c\u003c \" -\u003e \";\n","recorded":"2024-07-23 21:32:14.822832138","filePath":"null","pinned":false},{"value":"      cout \u003c\u003c i - 3 \u003c\u003c \" \" \u003c\u003c j - 2 \u003c\u003c \",\";\n","recorded":"2024-07-23 21:32:14.204832774","filePath":"null","pinned":false},{"value":"Introduction to industry 4.0 and industrial Internet of Things","recorded":"2024-07-23 20:39:03.40936955","filePath":"null","pinned":false},{"value":"  for (int i; i \u003c 6; i++) {\n    for (int j = 0; j \u003c 6; j++) {\n      cout \u003c\u003c arr[i][j] \u003c\u003c \" \";\n    }\n    cout \u003c\u003c endl;\n  }\n","recorded":"2024-07-23 20:24:50.497706361","filePath":"null","pinned":false},{"value":"        cout \u003c\u003c endl;\n","recorded":"2024-07-23 20:23:41.424290532","filePath":"null","pinned":false},{"value":" }\n","recorded":"2024-07-23 20:21:48.057642943","filePath":"null","pinned":false},{"value":"  for (int i; i \u003c 6; i++) {\n    for (int j = 0; j \u003c 6; j++) {\n      cout \u003c\u003c arr[i][j] \u003c\u003c \" \";\n    }\n    cout \u003c\u003c endl;\n ","recorded":"2024-07-23 20:21:46.752556602","filePath":"null","pinned":false},{"value":"\n","recorded":"2024-07-23 20:15:38.549801322","filePath":"null","pinned":false},{"value":"        /*c++;*/\n        /*d++;*/\n        /*c = 0;*/\n        /*d = 3;*/\n ","recorded":"2024-07-23 20:15:28.375862925","filePath":"null","pinned":false},{"value":"      d++;\n","recorded":"2024-07-23 20:13:43.731080991","filePath":"null","pinned":false},{"value":"      c++;\n","recorded":"2024-07-23 20:13:43.248345409","filePath":"null","pinned":false},{"value":"      }\n","recorded":"2024-07-23 20:13:00.589562928","filePath":"null","pinned":false},{"value":"      while (c \u003c 4 \u0026\u0026 d \u003c 7) {\n","recorded":"2024-07-23 20:12:54.580245342","filePath":"null","pinned":false},{"value":" c = 0;\n      d = 3;\n","recorded":"2024-07-23 20:10:51.00438415","filePath":"null","pinned":false},{"value":"  c = 0;\n      d = 3;\n","recorded":"2024-07-23 20:10:35.622716488","filePath":"null","pinned":false},{"value":"6","recorded":"2024-07-23 20:02:47.41331174","filePath":"null","pinned":false},{"value":"      a++;\n      b++;\n","recorded":"2024-07-23 20:00:18.007261775","filePath":"null","pinned":false},{"value":"a++;\n    b++;","recorded":"2024-07-23 19:59:38.16611897","filePath":"null","pinned":false},{"value":"      }d\n","recorded":"2024-07-23 19:57:23.075207622","filePath":"null","pinned":false},{"value":"bmon -p '\u003cdevice\u003e' -o ascii | awk '/\u003cdevice\u003e/ { print \"RX: \"$2\" TX: \"$4 }'\n","recorded":"2024-07-23 17:27:00.270002426","filePath":"null","pinned":false},{"value":"https://github.com/juspay/purescript-presto","recorded":"2024-07-23 17:23:47.704355018","filePath":"null","pinned":false},{"value":"https://ubuntu.com/download/desktop/thank-you?version=24.04\u0026architecture=amd64\u0026lts=true","recorded":"2024-07-23 14:44:32.746107349","filePath":"null","pinned":false},{"value":"https://docs.google.com/spreadsheets/d/1znNH74L-EQGm8yxkGUSA2_KsafYtTnow/edit?gid=859628889#gid=859628889","recorded":"2024-07-23 14:35:09.655027353","filePath":"null","pinned":false},{"value":"Flux architecture","recorded":"2024-07-23 14:27:27.74656364","filePath":"null","pinned":false},{"value":"https://github.com/vek422/dsa","recorded":"2024-07-23 09:00:24.671503322","filePath":"null","pinned":false},{"value":"ðŸ“· 947059-52048182.png","recorded":"2024-07-23 06:54:42.530554411","filePath":"/home/vek/.config/clipse/tmp_files/947059-52048182.png","pinned":false},{"value":"https://chrome.google.com/webstore/detail/ehllkhjndgnlokhomdlhgbineffifcbj","recorded":"2024-07-22 22:08:58.706735638","filePath":"null","pinned":false},{"value":"chrome://extensions/?id=ehllkhjndgnlokhomdlhgbineffifcbj","recorded":"2024-07-22 22:07:51.981702109","filePath":"null","pinned":false},{"value":"file:///home/vek/Documents/Competative%20Programming%20Handbook.pdf","recorded":"2024-07-22 19:40:46.942913718","filePath":"null","pinned":false},{"value":" ","recorded":"2024-07-22 19:15:40.321418042","filePath":"null","pinned":false},{"value":"kitty --title fly-is-kitty  kitty @ set-spacing padding=0 \u0026\u0026 cavay\n\n","recorded":"2024-07-22 19:15:34.891734065","filePath":"null","pinned":false},{"value":"kitty --title fly_is_kitty --hold  zsh (kitty @ set-spacing padding=0 \u0026\u0026 cava)","recorded":"2024-07-22 19:15:30.222172286","filePath":"null","pinned":false},{"value":"kitty --title fly_is_kitty --hold  zsh (kitty @ set-spacing padding=0 \u0026\u0026 cava) \n","recorded":"2024-07-22 19:15:16.023293301","filePath":"null","pinned":false},{"value":" set-spacing padding=0","recorded":"2024-07-22 19:04:42.910349218","filePath":"null","pinned":false},{"value":"https://media.fnag1-5.fna.whatsapp.net/v/t62.7118-24/11934360_2857746544389906_3467741923636115377_n.enc?ccb=11-4\u0026oh=01_Q5AaILrOtbe6TEcKHZTDppw8Vt0FAergy67ZOuJnNcX0STp1\u0026oe=66C5E5C7\u0026_nc_sid=5e03e0\u0026hash=Gs-7tuE_0RSbXmHY5c-xkhLTCpvFgadjx0Ib1S6HE6A%3D\u0026mode=auto\u0026mms-type=image\u0026__wa-mms=","recorded":"2024-07-22 18:56:28.254384694","filePath":"null","pinned":false},{"value":"print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\n","recorded":"2024-07-22 10:48:51.094099476","filePath":"null","pinned":false},{"value":"ls /usr/lib/libLLVM*\n","recorded":"2024-07-22 10:46:13.313652996","filePath":"null","pinned":false},{"value":"node","recorded":"2024-07-20 20:08:29.220493644","filePath":"null","pinned":false},{"value":"\tvector\u003cint\u003e in;\n        inorder(root,in);\n        int bst_count = 1;\n        int curr = in[0];\n        for(int i=1;i\u003cin.size();i++){\n            if(curr \u003c in[i]){\n                bst_count++;\n            }else{\n                bst_count = 1;\n            }\n            curr = in[i];\n        }\n        \n        return bst_count;","recorded":"2024-07-20 19:30:33.188219363","filePath":"null","pinned":false},{"value":"vector\u003cint\u003e in;\n        inorder(root,in);\n        int bst_count = 1;\n        int curr = in[0];\n        for(int i=1;i\u003cin.size();i++){\n            if(curr \u003c in[i]){\n                bst_count++;\n            }else{\n                bst_count = 1;\n            }\n            curr = in[i];\n        }\n        \n        return bst_count;","recorded":"2024-07-20 19:25:40.476850726","filePath":"null","pinned":false},{"value":"struct hash_pair{\n    size_t operator()(const pair\u003cNode*,bool\u003e\u0026 p) const {\n        auto hash1 = hash\u003cNode*\u003e{}(p.first);\n        auto hash2 = hash\u003cbool\u003e{}(p.second);\n        return hash1 ^ hash2;\n    }\n};","recorded":"2024-07-20 17:57:30.04747615","filePath":"null","pinned":false},{"value":"max(choosed,notChoosed)","recorded":"2024-07-20 17:52:14.754816027","filePath":"null","pinned":false},{"value":"size_t operator()(const pair\u003cT1, T2\u003e\u0026 p) const {\n        auto hash1 = hash\u003cT1\u003e{}(p.first);\n        auto hash2 = hash\u003cT2\u003e{}(p.second);\n        return hash1 ^ hash2;\n    }","recorded":"2024-07-20 17:49:23.225931241","filePath":"null","pinned":false},{"value":"\nclass Solution{\n    \n    \n\n  public:\n    //Function to return the maximum sum of non-adjacent nodes.\n    int getMaxSum(Node *root) \n    {\n        // Add your code here\n        \n        return chooseMaxSum(root,false); \n    }\n    int chooseMaxSum(Node*root,bool isParentSelected){\n        //if parent is selected i have only one choice that is to not choose current node\n        if(isParentSelected){\n            int ans = (root-\u003eleft ? chooseMaxSum(root-\u003eleft,false) : 0) + (root-\u003eright ? chooseMaxSum(root-\u003eright,false) : 0);\n            return ans;\n        }\n        \n        //if parent is not selected i have two choices that is either to select current node or not to select current node\n        int choosed = root-\u003edata + (root-\u003eleft ? chooseMaxSum(root-\u003eleft,true) : 0) + (root-\u003eright ? chooseMaxSum(root-\u003eright,true) : 0);\n        int notChoosed = (root-\u003eleft ? chooseMaxSum(root-\u003eleft,false) : 0) + (root-\u003eright ? chooseMaxSum(root-\u003eright,false) : 0);\n        return max(choosed,notChoosed);\n        \n        \n    }\n};","recorded":"2024-07-20 17:47:09.189014362","filePath":"null","pinned":false},{"value":"Input:\n        1\n      /   \\\n     2     3\n    /     /  \\\n   4     5    6\nOutput: 16\nExplanation: The maximum sum is sum of\nnodes 1 4 5 6 , i.e 16. These nodes are\nnon adjacent.\n","recorded":"2024-07-20 17:46:57.438312155","filePath":"null","pinned":false},{"value":"Input:\n     11\n    /  \\\n   1    2\nOutput: 11\nExplanation: The maximum sum is sum of\nnode 11.","recorded":"2024-07-20 17:46:14.916665747","filePath":"null","pinned":false},{"value":"Given a binary tree with a value associated with each node, we need to choose a subset of these nodes such that sum of chosen nodes is maximum under a constraint that no two chosen node in subset should be directly connected that is, if we have taken a node in our sum then we canâ€™t take its any children or parents in consideration and vice versa.","recorded":"2024-07-20 17:46:04.597116381","filePath":"null","pinned":false},{"value":"(root-\u003eleft ? chooseMaxSum(root-\u003eleft,false) : 0) + (root-\u003eright ? chooseMaxSum(root-\u003eright,false) : 0)","recorded":"2024-07-20 17:32:47.142368356","filePath":"null","pinned":false},{"value":"chooseMaxSum(root-\u003eleft-\u003eleft,false) + chooseMaxSum(root-\u003eleft-\u003eright,false);","recorded":"2024-07-20 17:14:13.945849523","filePath":"null","pinned":false},{"value":"==\u003e ERROR: Missing 6.9.10-arch1-1 kernel modules tree for module nvidia/555.58.02.","recorded":"2024-07-20 12:38:20.442921627","filePath":"null","pinned":false},{"value":"libguestfs-tools","recorded":"2024-07-20 12:33:32.124519291","filePath":"null","pinned":false},{"value":"./AppData/Local/nvim","recorded":"2024-07-20 12:28:17.528586214","filePath":"null","pinned":false},{"value":"ve = {\n  --   -- These options will be passed to conform.format()\n  --   timeout_ms = 500,\n  --   lsp_fallback = true,\n  -- },\n","recorded":"2024-07-20 12:26:13.567342824","filePath":"null","pinned":false},{"value":"    \n","recorded":"2024-07-20 12:17:28.805552879","filePath":"null","pinned":false},{"value":"'https://starship.rs/config-schema.json","recorded":"2024-07-20 12:13:22.844295556","filePath":"null","pinned":false},{"value":"pfetch","recorded":"2024-07-20 12:09:54.530989654","filePath":"null","pinned":false},{"value":"BEMENU_BACKEND","recorded":"2024-07-20 12:06:43.777700307","filePath":"null","pinned":false},{"value":"zram-size = ram / 2\ncompression-algorithm = zstd","recorded":"2024-07-20 11:34:00.983590458","filePath":"null","pinned":false},{"value":"/etc/systemd/zram-generator.conf\n","recorded":"2024-07-20 11:33:48.018727786","filePath":"null","pinned":false},{"value":"/etc/modules-load.d/zram.conf\n","recorded":"2024-07-20 11:32:27.479230776","filePath":"null","pinned":false},{"value":"pacman -Qet","recorded":"2024-07-20 11:31:05.281133637","filePath":"null","pinned":false},{"value":" pacman -Rns","recorded":"2024-07-20 11:30:54.754178084","filePath":"null","pinned":false},{"value":"sudo pacman -Qtdq\n","recorded":"2024-07-20 11:29:50.478647784","filePath":"null","pinned":false},{"value":"paccache -r\n","recorded":"2024-07-20 11:29:46.341249031","filePath":"null","pinned":false},{"value":"middle_click_paste","recorded":"2024-07-20 10:17:46.218694234","filePath":"null","pinned":false},{"value":"render_ahead_of_time","recorded":"2024-07-20 10:17:15.505666357","filePath":"null","pinned":false},{"value":"follow_mouse","recorded":"2024-07-20 10:14:40.761991504","filePath":"null","pinned":false},{"value":"bind = Alt, Tab, cyclenext # [hidden] sus keybind\nbind = Alt, Tab, bringactivetotop, # [hidden] bring it to the top","recorded":"2024-07-20 10:09:58.067855969","filePath":"null","pinned":false},{"value":"bringactivetotop","recorded":"2024-07-20 10:07:10.908834559","filePath":"null","pinned":false},{"value":" focus_on_activate = true\n    animate_manual_resizes = false\n    animate_mouse_windowdragging = false\n    enable_swallow = false\n    swallow_regex = (foot|kitty|allacritty|Alacritty)\n    \n    disable_hyprland_logo = true\n    force_default_wallpaper = 0\n    new_window_takes_over_fullscreen = 2\n    allow_session_lock_restore = true\n    \n    initial_workspace_tracking = false","recorded":"2024-07-20 09:59:17.984781578","filePath":"null","pinned":false},{"value":"    blur {\n        enabled = true\n        xray = true\n        special = false\n        new_optimizations = true\n        size = 14\n        passes = 4\n        brightness = 1\n        noise = 0.01\n        contrast = 1\n        popups = true\n        popups_ignorealpha = 0.6\n    }","recorded":"2024-07-20 09:58:09.761894835","filePath":"null","pinned":false},{"value":"env = QT_QPA_PLATFORM,wayland\nenv = GDK_BACKEND,wayland\nenv = GDK_SCALE,2\nenv = SDL_VIDEODRIVER,wayland\nenv = CLUTTER_BACKEND,wayland\nenv = XDG_CURRENT_DESKTOP,Hyprland\nenv = XDG_SESSION_TYPE,wayland\nenv = XDG_SESSION_DESKTOP,Hyprland","recorded":"2024-07-19 21:38:09.260826783","filePath":"null","pinned":false},{"value":"ls -l /dev/dri/by-path\n\n","recorded":"2024-07-19 21:35:28.918883447","filePath":"null","pinned":false},{"value":"env = XDG_SESSION_DESKTOP,Hyprland","recorded":"2024-07-19 21:33:10.269586955","filePath":"null","pinned":false},{"value":"env = XDG_SESSION_TYPE,wayland","recorded":"2024-07-19 21:33:02.109342763","filePath":"null","pinned":false},{"value":"env = XDG_CURRENT_DESKTOP,Hyprland","recorded":"2024-07-19 21:32:53.710141711","filePath":"null","pinned":false},{"value":"env = CLUTTER_BACKEND,wayland","recorded":"2024-07-19 21:32:44.326242615","filePath":"null","pinned":false},{"value":"env = SDL_VIDEODRIVER,wayland","recorded":"2024-07-19 21:32:27.242909311","filePath":"null","pinned":false},{"value":"vfr","recorded":"2024-07-19 21:29:03.741935587","filePath":"null","pinned":false},{"value":"env = GDK_SCALE,2\nenv = XCURSOR_SIZE,32","recorded":"2024-07-19 21:18:29.104492373","filePath":"null","pinned":false},{"value":"GDK_BACKEND=wayland","recorded":"2024-07-19 21:13:58.52099601","filePath":"null","pinned":false},{"value":"2","recorded":"2024-07-19 21:12:22.062710658","filePath":"null","pinned":false},{"value":"ðŸ“· 147838-438474299.png","recorded":"2024-07-19 20:54:03.455008081","filePath":"/home/vek/.config/clipse/tmp_files/147838-438474299.png","pinned":false},{"value":"https://wiki.hyprland.org/Configuring/XWayland/","recorded":"2024-07-19 20:51:49.714226406","filePath":"null","pinned":false},{"value":"xwayland {\n  force_zero_scaling = true\n}","recorded":"2024-07-19 20:49:54.627853438","filePath":"null","pinned":false},{"value":"env = QT_QPA_PLATFORM,wayland","recorded":"2024-07-19 20:42:28.907626828","filePath":"null","pinned":false},{"value":"if(root-\u003eright)","recorded":"2024-07-19 20:25:48.068933955","filePath":"null","pinned":false},{"value":"62 16 15 N 8 4 7 N 8 4","recorded":"2024-07-19 20:16:19.270092412","filePath":"null","pinned":false},{"value":"5 4 7 1 N 6 N N 2 N N N 3 N N\n1","recorded":"2024-07-19 18:52:37.686360665","filePath":"null","pinned":false},{"value":"//{ Driver Code Starts\n#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n#define MAX_HEIGHT 100000\n#define MAX_SIZE 100000\n\n// Tree Node\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n\n    Node(int val) {\n        data = val;\n        left = right = NULL;\n    }\n};\n\n// Function to Build Tree\nNode* buildTree(string str)\n{\n   // Corner Case\n   if(str.length() == 0 || str[0] == 'N')\n       return NULL;\n\n   // Creating vector of strings from input\n   // string after spliting by space\n   vector\u003cstring\u003e ip;\n\n   istringstream iss(str);\n   for(string str; iss \u003e\u003e str; )\n       ip.push_back(str);\n\n   // Create the root of the tree\n   Node* root = new Node(stoi(ip[0]));\n\n   // Push the root to the queue\n   queue\u003cNode*\u003e queue;\n   queue.push(root);\n\n   // Starting from the second element\n   int i = 1;\n   while(!queue.empty() \u0026\u0026 i \u003c ip.size()) {\n\n       // Get and remove the front of the queue\n       Node* currNode = queue.front();\n       queue.pop();\n\n       // Get the current node's value from the string\n       string currVal = ip[i];\n\n       // If the left child is not null\n       if(currVal != \"N\") {\n\n           // Create the left child for the current node\n           currNode-\u003eleft = new Node(stoi(currVal));\n\n           // Push it to the queue\n           queue.push(currNode-\u003eleft);\n       }\n\n       // For the right child\n       i++;\n       if(i \u003e= ip.size())\n           break;\n       currVal = ip[i];\n\n       // If the right child is not null\n       if(currVal != \"N\") {\n\n           // Create the right child for the current node\n           currNode-\u003eright = new Node(stoi(currVal));\n\n           // Push it to the queue\n           queue.push(currNode-\u003eright);\n       }\n       i++;\n   }\n\n   return root;\n}\n\n// } Driver Code Ends\n/*Complete the function below\nNode is as follows\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n\n    Node(int val) {\n        data = val;\n        left = right = NULL;\n    }\n};\n*/\ntypedef struct Node Node;\nclass Solution{\n  public:\n    // root : the root Node of the given BST\n    // target : the target sum\n    bool findNode(Node*root,int target){\n        if(root == nullptr ) return false;\n        if(root-\u003edata == target) return true;\n        if(root-\u003edata \u003c target) return findNode(root-\u003eright,target);\n        return findNode(root-\u003eleft,target);\n    }\n    int isPairPresent(struct Node *root, int target){\n        stack\u003cNode*\u003e tmp;\n        tmp.push(root);\n        while(!tmp.empty()){\n            auto top = tmp.top();\n            tmp.pop();\n            if(top == nullptr) continue;\n            if(findNode(root,abs(target-top-\u003edata))){\n                return 1;\n            }\n            tmp.push(top-\u003eright);\n            tmp.push(top-\u003eleft);\n        }\n        return 0;\n    }\n    };\n\n//{ Driver Code Starts.\nint main() {\n    \n   int t;\n   string tc;\n   getline(cin, tc);\n   t=stoi(tc);\n   while(t--)\n   {\n        string s; \n       getline(cin, s);\n       Node* root = buildTree(s);\n\n       getline(cin, s);\n       int k = stoi(s);\n        //getline(cin, s);\n       Solution obj;    \n       cout \u003c\u003c obj.isPairPresent(root, k) \u003c\u003c endl;\n       //cout\u003c\u003c\"~\"\u003c\u003cendl;\n   }\n   return 0;\n}\n\n// } Driver Code Ends","recorded":"2024-07-19 18:51:11.002896704","filePath":"null","pinned":false},{"value":"systemctl --user status xdg-desktop-portal-hyprland\n","recorded":"2024-07-19 18:51:06.218994456","filePath":"null","pinned":false},{"value":"systemctl --user status xdg-desktop-portal-hyprland","recorded":"2024-07-19 18:39:25.4354698","filePath":"null","pinned":false},{"value":"X Error of failed request:  BadValue (integer parameter out of range for operation)\n  Major opcode of failed request:  140 (RANDR)\n  Minor opcode of failed request:  21 (RRSetCrtcConfig)\n  Value in failed request:  0x0\n  Serial number of failed request:  22\n  Current serial number in output stream:  22","recorded":"2024-07-19 18:31:34.835716089","filePath":"null","pinned":false},{"value":"6 1 8 N 2 7 9 N 3 N N N 10 N 5\n12","recorded":"2024-07-19 16:27:17.135594999","filePath":"null","pinned":false},{"value":"837478","recorded":"2024-07-19 15:09:25.030783943","filePath":"null","pinned":false}]}